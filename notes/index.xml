<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>plan9better</title>
      <link>https://plan9better.github.io/notes</link>
      <description>Last 10 notes on plan9better</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>declarative</title>
    <link>https://plan9better.github.io/notes/declarative</link>
    <guid>https://plan9better.github.io/notes/declarative</guid>
    <description></description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>flake.nix</title>
    <link>https://plan9better.github.io/notes/flake.nix</link>
    <guid>https://plan9better.github.io/notes/flake.nix</guid>
    <description>Flakes are Nix’s version of package.json, they generate flake.lock similiar to package-lock.json which locks package versions, Helping produce reproducible environments ...</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>std unordered_set</title>
    <link>https://plan9better.github.io/notes/std-unordered_set</link>
    <guid>https://plan9better.github.io/notes/std-unordered_set</guid>
    <description>std::unordered_set. Set which is not sorted compared to a regular std::set. std::unordered_set&lt;int&gt; numbers Methods: insert(T) :: insert an item begin() :: ret iterator to the begining end() :: ret iterator to the end find(T) :: When not found returns iterator to the end, like end() otherwise count(T) :: Int` number of occurences of an element.</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>x64</title>
    <link>https://plan9better.github.io/notes/x64</link>
    <guid>https://plan9better.github.io/notes/x64</guid>
    <description>intels 64bit superset of x86.</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>x86</title>
    <link>https://plan9better.github.io/notes/x86</link>
    <guid>https://plan9better.github.io/notes/x86</guid>
    <description>Intel x86 32 bit format used before x64 which is it’s superset.</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>TORvsVPN</title>
    <link>https://plan9better.github.io/notes/TORvsVPN</link>
    <guid>https://plan9better.github.io/notes/TORvsVPN</guid>
    <description> TOR encrypts and routes traffic through multiple (typically 3) layers of relays (nodes). The goal is for all TOR users to be indistinguishable from one another.</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>Tailscale</title>
    <link>https://plan9better.github.io/notes/Tailscale</link>
    <guid>https://plan9better.github.io/notes/Tailscale</guid>
    <description>VPN to securely connect to devices without exposing them to the internet.</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>Theta notation</title>
    <link>https://plan9better.github.io/notes/Theta-notation</link>
    <guid>https://plan9better.github.io/notes/Theta-notation</guid>
    <description>For functions that grow at similar pace mathemathic definition \theta (g(n)) = \{f(n) : \exists_{c1, c2} \; \exists_{n_0 \in \mathbb{N}} \; \forall_{n &gt; n_0} \quad 0 \le c_1 \times ...</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>Tuple</title>
    <link>https://plan9better.github.io/notes/Tuple</link>
    <guid>https://plan9better.github.io/notes/Tuple</guid>
    <description>// declare let tup: (i32, f64, u8) = (5012, 0.3, 120); let x = tup.0 let y = tup.1 let z = tup.2 // destructure let (x, y, z) = tup;.</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item><item>
    <title>Types (CPP)</title>
    <link>https://plan9better.github.io/notes/Types-(CPP)</link>
    <guid>https://plan9better.github.io/notes/Types-(CPP)</guid>
    <description>Unsigned types can be prone to bugs best to avoid them, in C++ when comparing a signed integer to unsigned, it gets converted to unsigned which can lead to unexpected behaviour ...</description>
    <pubDate>Fri, 31 Jan 2025 17:14:18 GMT</pubDate>
  </item>
    </channel>
  </rss>